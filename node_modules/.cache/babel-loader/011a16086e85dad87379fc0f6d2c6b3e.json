{"ast":null,"code":"var _jsxFileName = \"/home/lewagon/code/Eduard-tech/Udemy-React/great_quotes/src/pages/AllQuotes.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport useHttp from '../hooks/use-http';\nimport QuoteList from '../components/quotes/QuoteList';\nimport { getAllQuotes } from '../lib/api';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AllQuotes = () => {\n  _s();\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === 'pending') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered focused\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return /*#__PURE__*/_jsxDEV(NoQuotesFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: DUMMY_QUOTES\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AllQuotes, \"DtSsc+4mwbHwzeZAH6CBC880sJc=\", false, function () {\n  return [useHttp];\n});\n\n_c = AllQuotes;\nexport default AllQuotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllQuotes\");","map":{"version":3,"sources":["/home/lewagon/code/Eduard-tech/Udemy-React/great_quotes/src/pages/AllQuotes.js"],"names":["useEffect","useHttp","QuoteList","getAllQuotes","LoadingSpinner","NoQuotesFound","AllQuotes","sendRequest","status","data","loadedQuotes","error","length","DUMMY_QUOTES"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,aAAP,MAA0B,oCAA1B;;;AAGA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,IAAI,EAACC,YAA3B;AAAyCC,IAAAA;AAAzC,MAAkDV,OAAO,CAACE,YAAD,EAAe,IAAf,CAA/D;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;;AAIA,MAAIC,MAAM,KAAK,SAAf,EAA0B;AACxB,wBAAO;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACL,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,YAAP;AAGD;;AAED,MAAIG,KAAJ,EAAW;AACT,wBAAO;AAAG,MAAA,SAAS,EAAC,kBAAb;AAAA,gBACJA;AADI;AAAA;AAAA;AAAA;AAAA,YAAP;AAGD;;AAED,MAAIH,MAAM,KAAK,WAAX,KAA2B,CAACE,YAAD,IAAiBA,YAAY,CAACE,MAAb,KAAwB,CAApE,CAAJ,EAA4E;AAC1E,wBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO,QAAC,SAAD;AAAW,IAAA,MAAM,EAAEC;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAxBD;;GAAMP,S;UACoDL,O;;;KADpDK,S;AA0BN,eAAeA,SAAf","sourcesContent":["import { useEffect } from 'react';\nimport useHttp from '../hooks/use-http';\nimport QuoteList from '../components/quotes/QuoteList';\nimport { getAllQuotes } from '../lib/api'\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound'\n\n\nconst AllQuotes = () => {\n  const {sendRequest, status, data:loadedQuotes, error} = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest])\n\n  if (status === 'pending') {\n    return <div className='centered'>\n      <LoadingSpinner />\n    </div>\n  }\n\n  if (error) {\n    return <p className=\"centered focused\">\n      {error}\n    </p>\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />\n  }\n\n  return <QuoteList quotes={DUMMY_QUOTES} />\n};\n\nexport default AllQuotes;"]},"metadata":{},"sourceType":"module"}